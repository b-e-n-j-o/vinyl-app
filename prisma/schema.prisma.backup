generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  followers     Follows[]    @relation("UserFollowers")
  following     Follows[]    @relation("UserFollowing")
  sessions      Session[]
  VinylDig      VinylDig[]
  vinyls        VinylPost[]
  shares        VinylShare[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model VinylPost {
  id         String       @id @default(cuid())
  title      String
  artist     String
  imageUrl   String?
  year       Int?
  genres     String
  label      String?
  discogsId  String
  userId     String
  createdAt  DateTime     @default(now())
  StoreVinyl StoreVinyl[]
  VinylDig   VinylDig[]
  user       User         @relation(fields: [userId], references: [id])
  shares     VinylShare[]

  @@index([userId])
  @@index([discogsId])
}

model VinylShare {
  id        String    @id @default(cuid())
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vinylId   String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  vinyl     VinylPost @relation(fields: [vinylId], references: [id])

  @@index([vinylId])
  @@index([userId])
}

model RecordStore {
  id                  String       @id @default(cuid())
  name                String
  address             String
  city                String
  latitude            Float
  longitude           Float
  phone               String?
  website             String?
  rating              Float?
  reviewCount         Int?
  status              String
  openingHours        String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  lastInventoryUpdate DateTime?
  StoreVinyl          StoreVinyl[]
  VinylDig            VinylDig[]

  @@index([city])
}

model StoreVinyl {
  id          String      @id
  addedAt     DateTime    @default(now())
  price       Float?
  condition   String?
  inStock     Boolean     @default(true)
  storeId     String
  vinylId     String
  VinylPost   VinylPost   @relation(fields: [vinylId], references: [id])
  RecordStore RecordStore @relation(fields: [storeId], references: [id])

  @@unique([storeId, vinylId])
  @@index([vinylId])
  @@index([storeId])
}

model VinylDig {
  id          String      @id
  comment     String?
  diggedAt    DateTime    @default(now())
  storeId     String
  vinylId     String
  userId      String
  User        User        @relation(fields: [userId], references: [id])
  VinylPost   VinylPost   @relation(fields: [vinylId], references: [id])
  RecordStore RecordStore @relation(fields: [storeId], references: [id])

  @@unique([userId, vinylId, storeId])
  @@index([userId])
  @@index([vinylId])
  @@index([storeId])
}
